Структура проекта:
    <groupId>ru.ruslan</groupId>
    <artifactId>autotesting</artifactId>
Нужно создать тестовый проект Java с названием "autotestting", использующий
    Spring Boot, с файлами настроек application.yml,
    JUnit5,
    содержащий обязательные классы:

1. Класс Param, использующий Spring Boot и Environment, реализовывает:
а) статический метод getProperty получающий произвольный параметр из файла настроек application.yml.
б) статический метод getTopicNames() получающий список всех длинных имен топиков в файле настроек application.yml, их количество может быть произвольным.
в) статический метод getTopicsizes() получающий количество из сопоставления коротких и длинных имен топиков в файле настроек application.yml.
г) статический метод getEnv() получающий значение переменной окружения по названию переменной указанному в аргументах.

2. Тестовый абстрактный класс GeneralMethods.java,
    чистый JUnit5,
    без использования аннотаций и библиотек Spring Boot и Spring,
    родительский класс для класса ApplyTaskManagerBase.java, который:
а) в методе помеченном аннотацией @BeforeAll получает значение параметра some.config.key3 из application.eml и выводит на печать в дочернем классе, получает env "LC_TIME" и выводим на печать в дочернем классе
б) в методе помеченном аннотацией @BeforeEach получает значение параметра some.config.key3 из application.eml и выводит на печать в дочернем классе, получает env "LC_TIME" и выводим на печать в дочернем классе
в) в методе помеченном аннотацией @AfterEach получает значение параметра some.config.key3 из application.eml и выводит на печать в дочернем классе, получает env "LC_TIME" и выводим на печать в дочернем классе
г) в методе помеченном аннотацией @AfterAll получает значение параметра some.config.key3 из application.eml и выводит на печать в дочернем классе, получает env "LC_TIME" и выводим на печать в дочернем классе
д) с помощью класса Param получает значение параметра some.config.key3 из application.eml и выводит на печать, получает env "LC_TIME" и выводим на печать

3. Тестовый базовый класс с именем ApplyTaskManagerBase.java:
    чистый JUnit5,
    без использования аннотаций и библиотек Spring Boot и Spring,
    родительский базовый класс для класса ApplyTaskManagerTest.java, который:
а) в методе помеченном аннотацией @BeforeAll получает значение параметра some.config.key2 из application.eml и выводит на печать в дочернем классе, получает env "LC_MONETARY" и выводим на печать в дочернем классе
б) в методе помеченном аннотацией @BeforeEach получает значение параметра some.config.key2 из application.eml и выводит на печать в дочернем классе, получает env "LC_MONETARY" и выводим на печать в дочернем классе
в) в методе помеченном аннотацией @AfterEach получает значение параметра some.config.key2 из application.eml и выводит на печать в дочернем классе, получает env "LC_MONETARY" и выводим на печать в дочернем классе
г) в методе помеченном аннотацией @AfterAll получает значение параметра some.config.key2 из application.eml и выводит на печать в дочернем классе, получает env "LC_MONETARY" и выводим на печать в дочернем классе
д) с помощью класса Param получает значение параметра some.config.key2 из application.eml и выводит на печать, получает env "LC_MONETARY" и выводим на печать

4. Тестовый класс с именем ApplyTaskManagerTest.java:
    который наследуется от класса ApplyTaskManagerTest.java
    чистый JUnit5,
    без использования аннотаций и библиотек Spring Boot и Spring,
    содержит одним тестовым метод.
а) в методе помеченном аннотацией @BeforeAll с помощью класса Param в тестовом методе получает параметр some.config.key и выводит на печать и получаем env "SSH_AUTH_SOCK" и выводим на печать
б) в методе помеченном аннотацией @BeforeEach с помощью класса Param в тестовом методе получает параметр some.config.key и выводит на печать и получаем env "SSH_AUTH_SOCK" и выводим на печать
в) в методе помеченном аннотацией @AfterEach с помощью класса Param в тестовом методе получает параметр some.config.key и выводит на печать и получаем env "SSH_AUTH_SOCK" и выводим на печать
г) в методе помеченном аннотацией @AfterAll с помощью класса Param в тестовом методе получает параметр some.config.key и выводит на печать и получаем env "SSH_AUTH_SOCK" и выводим на печать
д) с помощью класса Param в тестовом методе получает параметр some.config.key1 и выводит на печать и получаем env "SSH_AUTH_SOCK" и выводим на печать

5. файл настроек application.yml:
# Параметры приложения
some.config.key1: some-value-from-yml1
some.config.key2: some-value-from-yml2
some.config.key3: some-value-from-yml3
some.config.key4: some-value-from-yml4
some.config.key5: some-value-from-yml5

# Краткое наименование топиков и полное название топиков для Kafka
topics:
  topic1: topic-test-1
  topic2: topic-test-2
  topic3: topic-test-3
  topic4: topic-test-4

spring:
  profiles:
    active: test



создать public List<String> getTopicNames() который создает список из элементов "topic-test-1", "topic-test-2", "topic-test-3" и "topic-test-4"

git init

# Добавляем ссылку на удалённый репозиторий
git remote add origin git@github.com:Legioner1651/autotesting.git

# Отправляем код на сервер
git push -u origin master

feature/check environment and parameters