------------------------------------------------------------------------------------------------------------------------------
REST API
REST (Representational State Transfer)	— архитектурный стиль взаимодействия компонентов распределенной системы,
					разработанный Роем Филдингом в своей докторской диссертации.
					REST определяет ряд принципов проектирования веб-сервисов, обеспечивающих масштабируемость,
					производительность и простоту поддержки.

Основные принципы REST
1. Клиент-сервер архитектура: четкое разделение обязанностей клиента и сервера, что позволяет независимо развивать клиентские приложения и серверную инфраструктуру.
2. Отсутствие состояния (stateless): каждый запрос должен содержать всю необходимую информацию для обработки запроса сервером.
	Сервер не хранит состояние сеанса между запросами.
3. Кэширование: ответы могут кэшироваться клиентом или промежуточными прокси серверами для повышения производительности.
4. Единообразие интерфейса: использование унифицированных методов HTTP (GET, POST, PUT, DELETE и др.) и стандартных форматов представления ресурсов (JSON, XML).
5. Многоуровневая система: наличие посредников (прокси, балансировщики нагрузки, кеширующие сервисы) улучшает масштабируемость и безопасность.
6. Код по запросу (Code-on-demand, опционально): возможность динамической загрузки исполняемого кода (например, JavaScript), расширяя возможности клиентов.

Преимущества REST API
	- Простота реализации и понимания благодаря стандартизированному протоколу HTTP.
	- Высокая масштабируемость и гибкость архитектуры.
	- Независимость от технологий и платформ.
	- Возможность эффективного использования существующих инфраструктурных решений.

Таким образом, REST является популярным выбором для разработки современных веб-приложений и микросервисных архитектур.

------------------------------------------------------------------------------------------------------------------------------
HTTP
HTTP (HyperText Transfer Protocol) — это протокол передачи гипертекстовых документов, используемый для передачи данных в сети Интернет. HTTP позволяет клиентам запрашивать веб-ресурсы (страницы, изображения, файлы и др.) у серверов и получать ответы на запросы.

	Основные компоненты HTTP-запроса:
		Метод: тип операции, которую клиент хочет выполнить (GET, POST, PUT, DELETE и др.).
		URL: адрес ресурса, к которому обращается клиент.
		Версия протокола: версия HTTP, поддерживаемая клиентом и сервером.
		Заголовки: дополнительная информация о запросе (тип содержимого, cookies, аутентификационные данные).
		Тело запроса: сами данные, передаваемые клиенту (например, форма заполнения).

	Ответ сервера включает:
		Статус-код (например, 200 OK, 404 Not Found).
		Заголовки (дата отправки, размер файла, кодировка).
		Тело ответа (сам HTML-документ или файл).

	Основные методы HTTP:
		GET		- Используется для извлечения ресурса, должн быть безопасными и идемпотентными
		POST		- Применяется для отправки данных серверу с целью обработки (например, отправка формы регистрации)
		PUT		- Служит для обновления или замены существующего ресурса целиком
		DELETE		- Удаляет указанный ресурс на сервере.
		PATCH		- Обновляет лишь определённые части ресурса. PATCH-запросы применяются, когда полное обновление всего ресурса нежелательно.
		HEAD		- Идентичен методу GET, однако возвращает только заголовки ответа, без тела документа.
		OPTIONS		- Возвращает доступные методы и возможности ресурса (например, позволяет проверить поддерживаемые типы методов).
		CONNECT		- Устанавливает туннель через прокси-сервер, часто используется для протоколов типа WebSocket или SSH.

------------------------------------------------------------------------------------------------------------------------------
JSON
JSON (JavaScript Object Notation) — это легковесный формат передачи данных, используемый для хранения и обмена информацией между системами.

	Основные особенности JSON:
		- Человеческая читаемость: Формат легко воспринимается человеком, что упрощает разработку и отладку приложений.
		- Независимость от языка программирования: JSON поддерживается практически всеми современными языками программирования,
			включая JavaScript, Python, Ruby, PHP и многие другие.
		- Простота синтаксиса: Данные представляются в виде пар ключ-значение (key-value), массивов и объектов.
------------------------------------------------------------------------------------------------------------------------------
XML
XML (от англ. Extensible Markup Language)	— расширяемый язык разметки, предназначенный для хранения и передачи структурированных данных.
						XML позволяет создавать собственные метки и атрибуты,
						благодаря чему становится возможным гибкое описание любых видов данных.

Основные компоненты структуры XML
1. Объявление XML		<?xml version="1.0" encoding="UTF-8"?>
2. Корневой элемент		<root><!-- Содержимое --></root>
3. Элементы			<element>Содержание элемента</element>		   Элементы могут содержать вложенные элементы:
4. Атрибуты			<element attribute="value">Содержание элемента</element>
5. Комментарии			<!-- Это комментарий -->
6. Пространства имен
7. Инструкция обработки		<?processing-instruction target="data" ?>

Пример полной структуры XML:
<?xml version="1.0" encoding="UTF-8"?>	- декларации версии и кодировки
<!DOCTYPE note SYSTEM "note.dtd">	- объявление типа документа, которое ссылается на внешний DTD-файл note.dtd, определяющий структуру документа.
<note>
  <to>Иван</to>
  <from>Анна</from>
  <heading>Напоминание</heading>
  <body>Позвони маме!</body>
</note>
------------------------------------------------------------------------------------------------------------------------------

