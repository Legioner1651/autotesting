Тест-дизайн — это этап процесса тестирования, на котором проектируются и создаются тестовые случаи (тест-кейсы) в соответствии с определенными критериями.

1. Эквивалентное Разделение (Equivalence Partitioning)
    Идея: разбить входные данные на группы (классы эквивалентности), в которых тестовые данные должны обрабатываться одинаково.
        Пример: поле, принимающее целые числа от 1 до 100. Мы можем выделить три класса:
            недопустимые (меньше 1),
            допустимые (от 1 до 100),
            недопустимые (больше 100).
    Тестирование: берем по одному значению из каждого класса.

2. Анализ Граничных Значений (Boundary Value Analysis)
    Идея: тестирование на границах разделов. Ошибки часто возникают на границах.
        Пример: для того же поля (1-100) тестируем значения: 0, 1, 2, 99, 100, 101.

3.Таблица Решений (Decision Table)
    Идея: используется для тестирования бизнес-логики, которая зависит от комбинации условий.
        Пример: система скидок, зависящая от статуса клиента (новый, постоянный) и суммы заказа (больше 1000, меньше). Строим таблицу, где перечислены все комбинации условий и ожидаемые результаты.

4. Диаграмма Переходов Состояний (State Transition)
    Идея: тестирование систем, которые могут находиться в разных состояниях, и переходы между ними зависят от событий.
        Пример: банкомат: состояния (включен, выключен, ожидание, выдача денег) и события (вставить карту, ввести пин, запросить сумму).

5. Попарное Тестирование (Pairwise Testing)
    Идея: тестирование всех возможных пар значений входных параметров. Это уменьшает количество тестов, но покрывает большинство дефектов.
        Пример: если есть три параметра, каждый с тремя значениями, то полное покрытие будет 3*3*3=27 тестов.
            Попарное покрытие требует меньше тестов (обычно 9-12).

6. Сценарии Использования (Use Case Testing)
    Идея: тестирование на основе сценариев, которые описывают, как пользователь взаимодействует с системой для достижения цели.
        Пример: сценарий "покупка товара" включает: вход в систему, поиск товара, добавление в корзину, оформление заказа, оплату.

7. Тестирование на основе Предположений об Ошибках (Error Guessing)
    Идея: тестировщик использует свой опыт и интуицию, чтобы предположить, в каких местах системы могут быть ошибки.
        Пример: ввод специальных символов в текстовое поле, попытка удалить запись, которая используется.



9. Тестирование Белого Ящика (White Box Testing)
    Идея: тестирование с знанием внутренней структуры кода. Методы тест-дизайна включают:
        Покрытие операторов (каждая строка кода должна быть выполнена хотя бы раз).
        Покрытие решений (все возможные результаты условий должны быть протестированы).
        Покрытие условий (каждое условие в решении должно быть протестировано на все возможные значения).

10. Тестирование Черного Ящика (Black Box Testing)
    Идея: тестирование без знания внутренней структуры, только на основе спецификаций. Большинство вышеперечисленных техник (эквивалентное разделение, граничные значения и т.д.) относятся к черному ящику.

11. Тестирование Производительности (Performance Testing)
    Идея: тестирование того, как система behaves under load. Это включает:
        Нагрузочное тестирование (load testing)
        Стресс-тестирование (stress testing)
        Тестирование стабильности (endurance testing)

12. Тестирование Безопасности (Security Testing)
    Идея: проверка уязвимостей системы. Методы включают:
        SQL-инъекции
        XSS-атаки
        Проверка прав доступа



13. Тестирование Совместимости (Compatibility Testing)
    Идея: проверка работы системы в разных окружениях (браузеры, ОС, устройства).

14. Тестирование Удобства Использования (Usability Testing)
    Идея: оценка того, насколько продукт удобен для пользователя.

15. Тестирование Нагрузки (Load Testing)
    Идея: проверка поведения системы под ожидаемой нагрузкой.

16. Стресс-тестирование (Stress Testing)
    Идея: проверка системы при нагрузках, превышающих ожидаемые.

17. Регрессионное Тестирование (Regression Testing)
    Идея: проверка, что новые изменения не сломали существующую функциональность.

18. Дымовое Тестирование (Smoke Testing)
    Идея: быстрая проверка основных функций системы после сборки.

19 Исследовательское Тестирование (Exploratory Testing)
    Идея: одновременное изучение системы, проектирование тестов и их выполнение. Тестировщик не следует заранее написанным тест-кейсам.

20. Тестирование Доступности (Accessibility Testing)
    Идея: проверка, что система может использоваться людьми с ограниченными возможностями.