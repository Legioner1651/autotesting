Структура проекта:
    <groupId>ru.ruslan</groupId>
    <artifactId>autotesting</artifactId>

Нужно создать тестовый проект Java, использующий:
    Spring Boot, с файлом настроек application.yml,
    JUnit5,
    содержащий обязательные классы:

1. Класс Param, использующий Spring Boot и Environment, использует полноценный Spring Boot контекст, реализует статические методы, которые могут использовать в простые JUnit классы без Spring:
а) статический метод getProperty получающий произвольный параметр из файла настроек application.yml.
б) статический метод getEnv() получающий значение переменной окружения по названию переменной указанному в аргументах.

2. Тестовый класс с именем ApplyTaskManagerTest.java:
    чистый JUnit5,
    без использования аннотаций и библиотек Spring Boot и Spring,
    содержит одним тестовым метод.
а) с помощью метода getProperty() класса Param получает параметр some.config.key1 и выводит на печать
б) с помощью метода getEnv() класса Param получает env "SSH_AUTH_SOCK" и выводим на печать

3. файл настроек application.yml:
# Параметры приложения
some:
  config:
    key1: some-value-from-yml1
    key2: some-value-from-yml2
    key3: some-value-from-yml3
    key4: some-value-from-yml4
    key5: some-value-from-yml5

# Краткое наименование топиков
topics:
  topic1: topic-test-1
  topic2: topic-test-2
  topic3: topic-test-3
  topic4: topic-test-4

spring:
  profiles:
    active: test

4. Можно добавить необходимые классы для Param, чтобы он мог использовать полноценный Spring Boot контекст.

Классы ApplyTaskManagerTest не должен использовать аннотаций и библиотек Spring Boot и Spring




Классы GeneralMethods, ApplyTaskManagerBase и ApplyTaskManagerTest, не должны использовать аннотаций и библиотек Spring Boot и Spring

------------------------------------------------------------------------------------------------------------------------------

Проверить корректность кода:
Нужно что бы контейнер containerKafka запустился,
потом запустился контейнер containerKafkaUI и подключился к контейнеру containerKafka, и открыл порт для подключения браузером.

    protected static final DockerImageName KAFKA_IMAGE = DockerImageName.parse("confluentinc/cp-kafka:7.4.0");
    protected static final DockerImageName KAFKA_UI_IMAGE = DockerImageName.parse("provectuslabs/kafka-ui:v0.7.2");

    protected static ConfluentKafkaContainer containerKafka = new ConfluentKafkaContainer(KAFKA_IMAGE)
            .withNetwork(network)
            .withNetworkAliases()
            .withEnv("TZ", localTimeZone.toString())
            .withStartupTimeout(Duration.ofMinutes(5));

    protected static GenericContainer containerKafkaUI = new GenericContainer(KAFKA_UI_IMAGE)
            .withNetwork(network)
            .dependsOn(containerKafka)
            .withEnv("TZ", localTimeZone.toString())
            .withEnv("DYNAMIC_CONFIG_ENABLED", "true");

containerKafka.start();
containerKafkaUI.start();


-------------------------------------------------------------------------------------------------------------------

Запускаем контейнер с Кафкой
protected static final DockerImageName KAFKA_IMAGE = DockerImageName.parse("confluentinc/cp-kafka:7.4.0");
protected static ConfluentKafkaContainer containerKafka = new ConfluentKafkaContainer(KAFKA_IMAGE)
        .withNetwork(network)
        .dependsOn(containerKafka)
        .withNetworkAliases(ALIAS_CONTAINER_KAFKA);
containerKafka.start();
как узнать порт bootstrap.servers для подключения к брокеру изнутри докер сети через алиас