Технический скрининг Альфа Банк

[1 из 20]
Что такое Definition of Done тестирования?
1) Definition of Done тестирования - это процесс определения списка всех возможных тестовых сценариев перед началом тестирования.
2) Definition of Done в тестировании - это набор критериев и условий, которые определяют, когда конкретная задача тестирования или цикл тестирования считается завершенным.
3) Definition of Done тестирования - это формальный документ, содержащий список всех ошибок, найденных в программном продукте.
4) Definition of Done в тестировании - это процесс документирования всех найденных ошибок и проблем в программном продукте.

[2 из 20]
Когда можно считать, что тестирование окончено?
1) Тестирование окончено, когда заканчивается отведенное для него время
2) Тестирование может быть окончено после прохождения всех тестов без единой ошибки
3) Тестирование считается завершенным, когда количество найденных ошибок превышает определенный порог
4) Тестирование можно считать оконченным, когда выполнены всё определенные критерии завершения тестирования, такие как достижение требуемого уровня покрытия тестами или исправление всех выявленных ошибок.

[3 из 20]
Что такое CI/CD?
1) CI/CD (Continuous Integration/Continuous Delivery) — это практика разработки программного обеспечения, которая включает в себя автоматизацию процессов сборки, тестирования и развертывания приложений, обеспечивая быструю и надежную поставку изменений в продакшн.
2) CI/CD — это термин, используемый в контексте анализа рисков в программной инженерии, обозначающий "Critical Issues/Consequential Defects”, т.е. критические проблемы и дефекты, которые могут иметь серьезные последствия для проекта.
3) CI/CD — это аббревиатура or "Customer Interaction/Customer Development”, означающая методику разработки программного обеспечения, основанную на непрерывном взаимодействии с конечным пользователем для итеративного улучшения продукта.

4) CUCD — это сокращение or "Continuous
Inspection/Continuous Debugging", представляющее собой
подход к разработке ПО, основанный Ha непрерывном анализе
и устранении ошибок в коде.

[4 из 20]
Как меняется стоимость дефекта при тестировании программного обеспечения?
1) стоимость дефекта остаётся постоянной во время всего процесса разработки и тестирования.
2) стоимость дефекта зависит от опыта и квалификации разработчиков, исправляющих его.
3) Стоимость дефекта уменьшается с увеличением времени между его обнаружением и исправлением.
4) стоимость дефекта увеличивается с увеличением стадии жизненного цикла разработки, на которой он обнаружен.

[5 из 20]
Что такое contract testing?
1) Contract testing - это тестирование, которое оценивает производительность системы при определенной нагрузке.
2) Contract testing - это тестирование, которое проверяет соответствие программного обеспечения законодательству и стандартам безопасности.
3) Contract testing - это тестирование, направленное Ha проверку отдельных функций или модулей приложения.
4) Contract testing - это вид тестирования, который проверяет соблюдение контракта (интерфейса, API) между различными компонентами программного обеспечения, чтобы гарантировать их совместимость и корректную работу в совокупности.

[6 из 20]
Для чего используют JavaScriptExecutor?
1) JavaScriptExecutor используется для автоматизации создания пользовательских интерфейсов.
2) JavaScriptExecutor используется для выполнения JavaScript кода внутри браузера через Selenium WebDriver.
3) JavaScriptExecutor используется для тестирования серверной части веб-приложений.
4) JavaScriptExecutor используется для создания анимаций на веб-страницах.

[7 из 20]
Что из этого не является компонентом Web-приложения?
1) База данных приложения.
2) HTML-страницы.
3) Физический сервер, на котором размещено веб-приложение.
4) Клиентский javaScript-код.

[8 из 20]
Что такое Selenium?
1) Selenium - это инструмент для автоматизации тестирования веб-приложений.
2) Selenium - это браузерный плагин для улучшения безопасности интернет-сессий.
3) Selenium - это название операционной системы для мобильных устройств.
4) Selenium - это методика для создания искусственного интеллекта в программном обеспечении.

[9 из20]
Что является ключевым аспектом проверки работы сканера отпечатка пальца или Face ID?
1) Совместимость с разными операционными системами.
2) Точность распознавания отпечатка/лица в разных условиях освещения и углах обзора.
З) Время хранения отсканированных данных.
4) Расход батареи при активации сканера.

[10 из 20]
Что такое «представление» (view) и для чего оно применяется?
1) Представление (view) в SQL используется для оптимизации работы с транзакциями.
2) Представление (view) в SQL это виртуальная таблица, созданная на основе запроса SELECT, которая представляет собой результат выполнения этого запроса
3) Представление (view) в SQL используется для создания индексов на столбцах таблицы
4) Представление (view) в SQL используется для создания резервных копий баз данных

[11 из 20]
Что такое абстрактный класс?
1) Абстрактный класс в Java - это класс, который не содержит методов и предназначен только для наследования.
2) Абстрактный класс в Java - это класс, который не может содержать поля и переменные.
3) Абстрактный класс в Java - это класс, который содержит как реализованные, так и абстрактные методы, и не может быть, инстанциирован напрямую.
4) Абстрактный класс в Java - это класс, который может быть использован только для создания интерфейсов и не может содержать методов.

[12 из 20]
Как получить среднее значение всех чисел?
1) Использовать метод Arrays.mean() для вычисления среднего значения
2) Использовать метод Math.average() для вычисления среднего значения
3) Вычислить сумму всех чисел и разделить на их количество
4) Использовать метод Stream.average() для вычисления среднего значения

[13 из 20]
В чем разница между “Collection” и "Stream"?
1) “Collection” и "Stream" являются синонимами и используются взаимозаменяемо
2) *Collection* - это интерфейс для работы с группами объектов, “Stream” - для функционального стиля операций над коллекциями
3) “Collection” - это структура данных, “Stream” - протокол передачи данных
4) “Collection” используется для хранения данных, “Stream” - для асинхронного программирования

[14 из 20]
Как вывести на экран количество пустых строк с помощью метода “filter()”?
1) Использовать метод filter() с условием String::isNull() для фильтрации строк, которые являются null, и затем подсчитать их количество
2) Использовать метод filter() с условием String:isEmpty() для фильтрации пустых строк и затем подсчитать их количество
3) Использовать метод filter() с условием String::length() == 0 для фильтрации строк с нулевой длиной и затем подсчитать их количество
4) Использовать метод filter() с условием String:contains("") для фильтрации строк, содержащих пустую строку, и затем подсчитать их количество

[15 из 20]
Для чего используют системы контроля версий?
1) Системы контроля версий используются для автоматической генерации документации.
2) Системы контроля версий используются в качестве инструмента согласования доработок.
3) Системы контроля версий используются для отслеживания изменений в коде и совместной работы над проектом.
4) Системы контроля версий используются для создания резервных копий файлов.

[16 из 20]
Как интегрируется автоматическое тестирование в CI?
1) Автоматическое тестирование в CI интегрируется путём написания тестовых сценариев, которые выполняются автоматически после каждого коммита в репозиторий кода.
2) Автоматическое тестирование в CI интегрируется путём ручного запуска тестов перед каждым выпуском новой версии программного обеспечения.
3) Автоматическое тестирование в CI интегрируется через отслеживание изменений в коде с помощью телеметрии пользовательского поведения.
4) Автоматическое тестирование в CI интегрируется через вручную запускаемые скрипты после окончания каждого рабочего дня.

(17 из 20]
Как происходит шифрование?
1) Шифрование происходит путём преобразования исходного текста в нечитаемую форму с использованием определенного, алгоритма и ключа.
2) Шифрование происходит путём сокрытия текста в специальных папках на компьютере.
3) Шифрование происходит путём замены каждой буквы в тексте на ее номер в алфавите.
4) Шифрование происходит путём изменения шрифта и размера текста для усложнения его восприятия.

[18 из 20]
Какие отличия между XML и JSON?
1) XML имеет более сложный синтаксис и требует больше места для хранения данных по сравнению с JSON.
2) XML поддерживает только текстовые данные, в то время как JSON поддерживает различные типы данных, такие как числа и логические значения.
3) XML является более распространённым форматом для обмена данными между веб-сервисами по сравнению с JSON.
4) Основное отличие между XML JSON заключается в структуре данных. XML представляет данные в виде древовидной структуры с помощью тегов, a JSON использует пары ключ-значение в формате объектов.

[19 из 20]
Что такое REST API?
1) REST API - это протокол обмена структурированными сообщениями в распределенных вычислительных средах, используемый в веб-сервисах.
2) REST API - это архитектурный стиль веб-сервисов, который использует принципы REST (Representational State Transfer) для обмена данными между клиентом и сервером.
3) REST API - это программный пакет для автоматизации тестирования,
4) REST API - это сокращение от "Remote Execution System, Testing Application Programming Interface".

[20 из 20]
При помощи чего формируются запросы к базе данных?
1) С помощью объектов Statement, PreparedStatement, CallableStatement (JDBC)
2) Используя строковые литералы SQL в коде Java
3) Через аннотации SQL в Java классах
4) С использованием XML конфигураций.

-----------------------------------------------------------------------------------------------------------------------------

Практики разработки программного обеспечения

1. Методологии и фреймворки (как мы работаем)
Это высокоуровневые подходы к организации процесса разработки.
    Гибкая методология разработки (Agile):
        Суть: Итеративная разработка короткими циклами (спринтами), постоянная обратная связь от заказчика, адаптация к изменениям.
        Практики: Ежедневные стендапы, планирование спринта, ретроспективы.
    Scrum: Самый популярный фреймворк в рамках Agile.
        Роли: Владелец продукта (Product Owner), Scrum-мастер, Команда разработки.
        Артефакты: Бэклог продукта, Бэклог спринта.
        Церемонии: Спринт, Планирование спринта, Ежедневный стендап, Обзор спринта, Ретроспектива.
    Kanban: Визуализация рабочего процесса для ограничения работы в процессе (WIP) и непрерывного потока.
        Практики: Канбан-доска (столбцы "To Do", "In Progress", "Done"), ограничение WIP, управление потоком.
        Waterfall (Каскадная модель): Последовательный подход, где каждая фаза (сбор требований, дизайн, разработка, тестирование, внедрение) завершается полностью перед началом следующей. Подходит для проектов с очень четкими и неизменными требованиями.

2. Технические практики (как мы пишем код)
Эти практики напрямую влияют на качество кода.
    Непрерывная интеграция (Continuous Integration, CI):
        Суть: Разработчики часто (несколько раз в день) сливают свои изменения в общий репозиторий. Каждое такое слияние автоматически проверяется сборкой и запуском тестов, чтобы быстро выявить ошибки интеграции.
    Непрерывная поставка/развертывание (Continuous Delivery/Deployment, CD):
        Суть: Расширение CI. Любое изменение, прошедшее CI, может быть автоматически развернуто на тестовых, стейджинг- и продакшн-окружениях. Это позволяет выпускать релизы быстро и часто.
    Разработка через тестирование (Test-Driven Development, TDD):
        Цикл "Красный-Зеленый-Рефакторинг":
            Красный: Написать тест, который падает (так как функциональности еще нет).
            Зеленый: Написать минимальный код, чтобы тест прошел.
            Рефакторинг: Улучшить код, не ломая тесты.
    Парное программирование (Pair Programming):
        Суть: Два разработчика работают за одним компьютером. Один ("Водитель") пишет код, второй ("Наблюдатель") просматривает код и мыслит стратегически. Это улучшает качество кода и распространение знаний в команде.
    Обзор кода (Code Review):
        Суть: Процесс, при котором другие члены команды проверяют новый код перед его слиянием в основную ветку. Цель — найти ошибки, улучшить читаемость и разделить знания.
    Рефакторинг (Refactoring):
        Суть: Структурное улучшение существующего кода без изменения его внешнего поведения. Делает код более чистым, понятным и легким для поддержки.
    Простота дизайна (Simplicity) и YAGNI:
        Суть: Следует проектировать и реализовывать только самые необходимые функции, избегая преждевременной оптимизации и избыточности. YAGNI (You Aren't Gonna Need It) — "Вам это не понадобится".

3. Практики проектирования и архитектуры

    Шаблоны проектирования (Design Patterns):
        Суть: Типовые, проверенные решения часто встречающихся проблем проектирования. Например, Singleton, Observer, Factory. Позволяют писать более гибкий и сопровождаемый код.
    Принципы SOLID:
        SRP: Принцип единственной ответственности (один класс — одна зона ответственности).
        OCP: Принцип открытости/закрытости (классы открыты для расширения, но закрыты для изменений).
        LSP: Принцип подстановки Барбары Лисков (объекты должны быть заменяемы на экземпляры их подтипов).
        ISP: Принцип разделения интерфейса (лучше много специфичных интерфейсов, чем один универсальный).
        DIP: Принцип инверсии зависимостей (зависить от абстракций, а не от конкретных классов).
    Domain-Driven Design (DDD):
        Суть: Подход к разработке сложных систем через глубокое погружение в предметную область (Domain) и использование единого языка (Ubiquitous Language) между разработчиками и экспертами.
    Микросервисная архитектура:
        Суть: Вместо одного большого монолитного приложения, система строится как набор небольших, слабо связанных и независимо развертываемых сервисов.

4. Практики обеспечения качества (QA)

    Автоматизированное тестирование:
        Пирамида тестов: Много юнит-тестов (быстрые, дешевые), меньше интеграционных тестов, еще меньше UI-тестов (медленные, дорогие).
    Непрерывное тестирование:
        Суть: Тестирование интегрировано в CI/CD-пайплайн. Тесты запускаются автоматически на каждом этапе, обеспечивая немедленную обратную связь.

5. Практики управления и сотрудничества

    Пользовательские истории (User Stories):
        Суть: Формулировка требований с точки зрения конечного пользователя: "Как [роль], я хочу [возможность], чтобы [получить выгоду]".
    Definition of Ready (DoR) и Definition of Done (DoD):
        DoR: Четкие критерии, когда задача готова к взятию в работу.
        DoD: Четкие критерии, когда задача считается полностью завершенной (как мы обсуждали ранее).
    Ретроспектива (Retrospective):
        Суть: Регулярная встреча команды по окончании спринта для обсуждения: "Что прошло хорошо? Что можно улучшить? Какие улучшения мы внедрим в следующем спринте?".