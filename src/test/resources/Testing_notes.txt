								Конспект_тестирование.txt

1. Что такое баг?
Баг – это отклонение фактического результата от ожидаемого.

2. Что же такое тестирование?
Любое тестирование – это поиск багов!
Глоссарий стандартов IEEE по терминологии разработок программного обеспечения:
	тестирование – это процесс наблюдения за выполнением программы в специальных условиях и вынесения на этой основе оценки каких-либо ее аспектов.

Источники ожидаемого результата:
	Техническое задание (тз)
	Жизненный опыт
	Здравый смысл
	Авторитетное мнение
	Устоявшиеся стандарты
	Общение

Цель тестирования
Цель тестирования – это нахождение багов до того, как их найдут пользователи!

Распространенные заблуждения:
	Цель тестирования – это 100%-я проверка ПО.
	Критерий эффективности тестирования – это количество багов, найденных до релиза.

3. Процесс разработки ПО
Процесс разработки ПО – это путь от идеи до поддержки готового продукта.

Идея -> ТЗ (дизайн и документация) -> Кодирование -> Тестирование -> Релиз

Кто генерирует идеи?
	Менеджер
	Служба поддержки
	Новый контракт

Идея – описание цели
Рабочая концепция – описание пути к достижению этой цели

Хорошее ТЗ
	Акцент на деталях и их четкое описание
	Забота о недопущении неверного толкования
	Непротиворечивость с другими ТЗ и внутри ТЗ
	Логическая взаимосвязь компонентов
	Полнота охвата предмета
	Соответствие нормативным актам
	Соответствие деловой практике

Техническое задание
	Изображения для демонстрации пользовательского интерфейса
	Блок-схемы для демонстрации алгоритмов действия
	Примеры

Разработка
Разработчик переводит вещи, отращенные в ТЗ (или в задаче) на язык программирования.

Причины возникновения багов в коде:
	Некачественное ТЗ
	Личные качества программиста
	Отсутствие опыта
	Пренебрежение стандартам кодирования
	Сложность системы
	Отсутствие юнит-тестирования
	Нереально короткие сроки для разработки

Возможности «оздоровления» кода и предотвращения багов
	Наличие требований к содержанию ТЗ
	Возможность прямой, быстрой и эффективной коммуникации (с другими программистами, тестировщиками, менеджерами проекта)
	Ревью кода
	Стандарты программирования
	Реальные сроки
	Проведение юнит-тестирования
	Минимальные проверки
*************
Юнит-тестирование — процесс в программировании, позволяющий проверить на корректность отдельные модули исходного кода программы.

Тестирование и исправление багов:
	Приемочные тесты
	Тестирование новых компонент
	Регрессионное тестирование

Цикл тестирования:
	Изучение и анализ предмета тестирования
		Функциональное тестирование: (Функциональность – это не что иное, как продукт, предоставляемый пользователю.)
			Какие функциональности предстоит протестировать?
			Как эти функциональности работают?
	Планирование тестирования
		Требует наибольшего творчества и профессионализма
	Исполнение тестирования
		Фактический поиск багов в написанном коде с использованием тест-кейсов написанных ранее.

Релиз:
	Основной релиз
	Дополнительный релиз
	Заплаточный релиз

4. Классификация видов тестирования
По знанию внутренностей системы
	Черный ящик
	При подходе "Черный ящик" тестировщик не основывает идеи для тестирования на знании об устройстве и логике тестируемой части бэк-энда. Идеи формируются путем предположений о сценариях, которые будут реализовываться и применяться пользователями. Такие сценарии называются паттернами поведения пользователей.
	Серый ящик
	Белый ящик
	при подходе "Белый ящик" тестировщик основывает идеи для тестирования на знании об устройстве и логике тестируемой части бэк-энда
По объекту тестирования
	Функциональное тестирование
	Тестирование интерфейса пользователя (UI testing)
		Тестирование интерфейса и тестирование с помощью интерфейса
	Тестирование локализации
	Тестирование скорости и надежности
	Тестирование безопасности — это множество вещей, суть которых заключается в том, чтобы усложнить условия для кражи — кражи данных, денег и информации.
	Тестирование юзабилити
	Тестирование совместимости
		Тестирование с разными браузерами называется кросс-браузер- тестированием.
		Тестирование с разными ОС называется кроссплатформ-тестированием
По субъекту тестирования
	Альфа-тестировщики - это сотрудники компании, которые профессионально или непрофессионально проводят тестирование
	Бета тестировщик - человек, который не является сотрудником компании и которому посчастливилось пользоваться новой системой до того, как она станет доступна всем остальным.
По времени проведения тестирования
	До передачи пользователю – альфа тестирование:
		Тест приемки
		Тестирование новых функциональностей
		Регрессионное тестирование
		Тест сдачи
	После передачи пользователю – бета – тестирование

По критерию позитивности сценариев
	Позитивные сценарии - это сценарии, предполагающие нормальное, "правильное" использование работу системы.
	Негативные сценарии - сценарии, проверяющие ситуацию, связанную с потенциальной ошибкой пользователя потенциальным дефектом в системе
По степени изолированности тестируемых компонентов
	Компонентное тестирование - это тестирование на уровне логического компонента
	Интеграционное тестирование - это тестирование на уровне двух или больше компонентов
	Системное тестирование - это проверка всей системы от начала до конца

По степени автоматизированности тестирования
	Ручное тестирование - это исполнение тесткейсов без помощи каких-либо программ, автоматизирующих вашу работу
	Автоматизированное тестирование
	Смешанное/полуавтоматизированное тестирование
По степени подготовки к тестированию
	Тестирование по тест-кейсам

	Интуитивное тестирование (ad-hok), (тест приемки и/или тест сдачи)


2 ********************************************************************************************************

unit tests
Component tests		Component testing, also known as program or module testing
Integration tests	Интеграционное тестирование — одна из фаз тестирования программного обеспечения, при которой отдельные программные модули объединяются и тестируются в группе.
system tests		Систеемное тестиирование программного обеспечения — это тестирование программного обеспечения, выполняемое на полной, интегрированной системе
manual tests		Ручное тестирование — часть процесса тестирования на этапе контроля качества в  процессе разработки программного обеспечения. Оно производится тестировщиком без использования программных средств, для проверки программы или сайта путём моделирования действий пользователя


2 ********************************************************************************************************

Документирование тестов:
- Чек-лист (checklist) — напоминание тестировщику, что нужно не забыть проверить. Краткий список, без лишних шагов.
	Базовые функции, без которых существование приложения теряет смысл
	Функции, востребованные большинством пользователей

	Остальные функции и особые сценарии

- Тест-кейс— набор входных данных, условий выполнения и ожидаемых результатов, разработанный с целью проверки того или иного свойства или поведения программного средства.

Виды тест-кейсов:
	Высокоуровневый тест-кейс (high leveltest case) — тест-кейс без конкретных входных данных и ожидаемых результатов
	Низкоуровневый тест-кейс (low level test case) — тест-кейс с конкретными входными данными и ожидаемыми результатами

Цель написания тест-кейсов:
	Структурировать и систематизировать подход к тестированию
	Вычислять метрики тестового покрытия (test coverage metrics) и принимать меры по его увеличению
	Отслеживать соответствие текущей ситуации плану
	Уточнить взаимопонимание между заказчиком, разработчиками и тестировщиками
	Хранить информацию для длительного использования и обмена опытом между сотрудниками и командами
	Проводить регрессионное тестирование и повторное тестирование
	Быстро вводить в курс дела нового сотрудника, недавно подключившегося к проекту.

Свойства качественных тест-кейсов:
	Правильный технический язык
	Соответствие принятым шаблонам оформления и традициям
	Баланс между специфичностью и общностью

Набор тест-кейсов (test case suite, test suite, test set) — совокупность тест-кейсов, выбранных с некоторой общей целью или по некоторому общему признаку.

- Наборы тест-кейсов
	свободных наборов:
	последовательных наборов

Принципы построения наборов тесткейсов
	На основе чек-листов
	На основе разбиения приложения на модули и подмодули
	По принципу проверки самых важных, менее важных и всех остальных функций приложения
	По принципу частоты обнаружения тесткейсами дефектов в приложении

	По области внутренней работы приложения
	По видам тестирования

Типичные ошибки
	Отсутствие заглавия тест-кейса или плохо написанное заглавие
	Постоянное использование слов «проверить» (и ему подобных) в чек-листах.
	Описание стандартных элементов интерфейса вместо использования их устоявшихся названий
	Ссылка на другие тест-кейсы или шаги других тест-кейсов
	Расплывчатые двусмысленные описания действий и ожидаемых результатов

	Описание событий или процессов в качестве шагов или ожидаемых результатов
	Отсутствие описания приготовления к выполнению тест-кейса

Системы контроля версий:
	Поддержка хранения файлов в репозитории.
	Поддержка истории версий файлов в репозитории.
	Нахождение конфликтов при изменении исходного кода и обеспечение синхронизации при работе в многопользовательской среде разработки.
	Отслеживание авторов изменений.

Основные термины
	working copy— рабочая (локальная) копия документов.
	repository, depot — хранилище.
	revision—версия документа. Новые изменения (changeset) создают новую ревизию репозитория.
	check-in, commit, submit— фиксация изменений.
	check-out, clone — извлечение документа из хранилища и создание рабочей копии.
	update, sync — синхронизация рабочей копии до некоторого заданного состояния хранилища (в т.ч. и к более старому состоянию, чем текущее).
	merge, integration— слияние независимых изменений.
	conflict — ситуация, когда несколько пользователей сделали изменения одного и того же участка документа.
	head — самая свежая версия (revision) в хранилище.
	origin — имя главного сервера

Ветвление
	Ветвь (branch) — направление разработки проекта, независимое от других.
	Ствол (trunk, mainline, master) — основная ветвь разработки проекта.


3 ************************************************************

Тестовый сценарий (test-case)
Тестовый сценарий — это описание начальных условий, входных данных, действий пользователя и ожидаемого результата.

Типичный тест кейс состоит из следующих частей:
	Цель.
	Предварительные шаги (опционально).
	Шаги.- Это описанный по шагам алгоритм выполнения теста.
	Ожидаемый результат (или результаты).

Проектирование тестов:
	Тест-анализ (что тестировать?)
	Тест-дизайн (как тестировать?)
		Оптимальное тестовое покрытие тестируемого приложения, т.е.:
			Минимум тестов
			Максимум выявленных дефектов


Классы эквивалентности:
Классы эквивалентности – области, внутри которых значения эквивалентны друг другу.
	Тестирование одного значения приводит к тому же результату, что и тестирование другого. Поэтому можно использовать одно входное значение из каждого класса эквивалентности в качестве представителя целой группы значений.



Анализ граничных значений
:
	Это техника проверки ошибок на границах классов эквивалентности

	Цель - найти ошибки, связанные с граничными значениями.

Алгоритм использования техники "граничных значений":

	Выделить классы эквивалентности
	Определить граничные значения этих классов.
	Понять, к какому классу будет относиться каждая граница.
	Для каждой границы нам нужно провести 3 теста:

Варианты границ


	Числовые
	Временные границы
	Границы циклов
	Границы типов
	Другие границы, связанные с нефункциональными видами тестирования — производительности, конфигураций

Доменный анализ
:
	Доменное тестирование (domain testing, domain analysis) — техника создания эффективных и результативных тест-кейсов в случае, когда несколько переменных могут или должны быть протестированы одновременно.

4 ************************************************************

Виды границ:
	Логические
	Физические
	Технологические
	Произвольные

Тестовая комбинаторика:
	Полный перебор
	Метод минимальных проверок
	Атомарные проверки

	Pairwise (попарное тестирование)

		Pairwise: - берем пары значений и проверяем все сочетания пар


Pairwise (попарное тестирование), Алгоритм применения техники: (ALLPAIRS, PICT)
	1.Определить переменные
	2.Определить их значения
	3.Оптимизировать значения
	4.Описать условия и зависимости
	5.Построить тестовую таблицу

5 ************************************************************

National Institute of Standards and Technology (NIST)

97% of software errors are caused by the interaction of just two parameters with each other" - IBM study

The NIST researchers counted the numbers of 'individual factors' that were involved in the flaws underlying the actual failures.

In the four systems investigated by the NIST team,
29% to 68% of the flaws involved a single factor;
70% to 97% of the flaws involved one or two factors;
89% to 99% of the flaws involved one, two or three factors;
96% to 100% of the flaws involved one, two, three or four factors;
96% to 100% of the flaws involved one, two, three, four or five factors,
and no flaw involved more than six factors [62,63,128].
A lesson from the NIST investigations of the failures of real-world systems is as follows.